{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAUC,SAASC,cAAc,SACvCF,EAAQG,iBAAiB,UAIzB,SAAsBC,GACpBA,EAAIC,iBACJ,MAAMC,EAAW,IAAIC,SAASP,GAgBhC,OAdEM,EAASE,SAAQ,CAACC,EAAOC,KACvB,GAAIC,OAAOF,GAAS,EAAG,CACrB,IAAIG,EAAQ,EAIZ,OAHAA,GAAS,OACLA,EAAQ,GACVd,EAAAe,OAAOC,QAAQ,gC,CAGfR,EAASI,GAAQC,OAAOF,GAC/BM,EAAkB,IAAIT,E,IAUrB,WACE,MAAMU,OAAEA,EAAMC,MAAEA,EAAKC,KAAEA,GAAUH,EAEjC,IAAK,IAAII,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EAClDA,EAAS,GACJC,GAAkBF,EAChCG,EAAcF,EAAUC,KAEhBA,EAAgBH,EAChBI,EAAcF,EAAUC,G,CAf/BE,GACMP,C,IArBP,IAAIA,EAAkB,GAwBtB,IAAIK,EAAgB,EAkBpB,SAASC,EAAcF,EAASF,GAC9B,MAAMM,EAAgBC,KAAKC,SAAW,GACrB,IAAIC,SAAQ,CAACC,EAASC,KACvCC,YAAW,KACLN,EACFI,EAAQ7B,EAAAe,OAAOiB,QAAQ,uBAAqBX,QAAiBF,QAI3DW,EAAK9B,EAAAe,OAAOkB,QAAQ,sBAAoBZ,QAAiBF,OAAW,GAGrEA,EAAM,IAEDe,KAAiBC,E,CAW3B,SAASA,IAEP,MAAO,CACLd,SAAU,GAAGA,WACbF,MAAO,GAAGA,Q","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// console.log(Notify);\n\nconst refForm = document.querySelector('.form');\nrefForm.addEventListener('submit', onFormSubmit)\nlet formDataCurrent = {}\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault()\n  const formData = new FormData(refForm)\n\n  formData.forEach((value, name) => {\n    if (Number(value) < 0) {\n      let count = 0;\n      count += 1;\n      if (count < 3)\n        Notify.warning(`Value should hit more than 0`)\n      return\n    } else { \n        formData[name] = Number(value);\n formDataCurrent = {...formData}\n    }  \n})\n\n foo(formDataCurrent)\nreturn formDataCurrent\n}\n\nlet variableValue = 0;\n\n  function foo() { \n    const { amount, delay, step  } = formDataCurrent;\n\n    for (let position = 1; position <= amount; position += 1){\n      if(position>1){\n              variableValue +=  step;\ncreatePromise(position, variableValue)\n      }else{\n        variableValue = delay\n        createPromise(position, variableValue)\n      }\n    } \n  }\n  \n\n\nfunction createPromise(position,delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise =  new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      // resolve(console.log(`✅ Fulfilled promise ${position} in ${delay}ms`));\n    } else {\n\n      reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n      // reject(console.log(`❌ Rejected promise ${position} in ${delay}ms`));\n    }\n  }, delay);\n});\n  promise.then((onResolve, onReject))\n};\n\n\nfunction onResolve() {\n  return {\n    position: `${position}`,\n    delay: `${delay}`\n  }\n }\n\nfunction onReject() {\n\n  return {\n    position: `${position}`,\n    delay: `${delay}`\n  }\n }\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refForm","document","querySelector","addEventListener","evt","preventDefault","formData","FormData","forEach","value","name","Number","count","Notify","warning","$47d4ff9957288465$var$formDataCurrent","amount","delay","step","position","$47d4ff9957288465$var$variableValue","$47d4ff9957288465$var$createPromise","$47d4ff9957288465$var$foo","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","success","failure","then","$47d4ff9957288465$var$onReject"],"version":3,"file":"03-promises.687627cc.js.map"}